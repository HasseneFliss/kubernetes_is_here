overview:
in your local repo you do all the encrypting
asymmetric crypto algorithm



step1: install cli kubeseal and install CRD in cluster side
  - install brew install kubeseal #install sealedsecret cli
  - install custom ressource definition CRD cluster side # see file sealedsecretcontroller.yaml
  - deploy crdclusterside.yaml file
  - check if the pod is deployed in kube-system namespace
step2:
  - get secret deployed in kube-system namespace # kubectl get secret -n kube-system and pick sealed-secret-xxxxx
  - get the certificate # kubectl get secret -n kube-system -o yaml
  - fetch the certificate to create cert.pem file # kubeseal --fetch-cert > cert.pem
  - check if the file cert.pem is created
step3:
  - create a regular secret object with a data like "token" encoded in base 64
  - SEAL the secret using # kubeseal < secret.yaml --cert cert.pem -o yaml > sealedsecret.yaml (cert is used to encrypt the secret)
  - check if the file sealedsecret.yaml is created with a token
  - push only the sealedsecret.yaml to your repos 
      - git status
      - git add filename sealedsecret
      - git commit -m ""
      - git push
  - apply sealedsecret.yaml into kubernetes # this will create 2 object in kubernetes secret and sealed secret child and parent
  - get secret and sealedsecret from ns # kubectl get secret,sealed secret -n sealed secret
  - get the output -o yaml of secret generated recently and decode it with base 64 and we will have the original value
  - apply a deployment that refers to the secret normally

